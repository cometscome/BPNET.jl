const num_of_maxparameters = 4


struct FingerPrint
    itype::Int64
    description::String
    atomtype::String
    nenv::Int64
    envtypes::Vector{String}
    rc_min::Float64
    rc_max::Float64
    sftype::String
    nsf::Int64
    nsfparam::Int64
    sf::Vector{Int64}
    sfparam::Matrix{Float64}
    sfenv::Matrix{Int64}
    neval::Int64
    sfval_min::Vector{Float64}
    sfval_max::Vector{Float64}
    sfval_avg::Vector{Float64}
    sfval_cov::Vector{Float64}
end

const NENV_MAX = 2


function FingerPrint(atomtype, envtypes; basistype="Chebyshev", rc_min=0.55, rc_max=8.0, description="generated by BPNET.jl", kwargs...)
    itype = findfirst(x -> x == atomtype, envtypes)
    @assert typeof(itype) <: Integer "$(atomtype) is not found in $(envtypes)"
    nenv = length(envtypes)
    sftype = basistype
    if basistype == "Chebyshev"
        sfparam, sfenv, Rc, num_of_coeffs, num_of_parameters = chebyshevparam(nenv, kwargs)
        rc_max = max(Rc, rc_max)
    else
        error("basistype = $(basistype) is not supported")
    end
    sf = zeros(num_of_coeffs)
    sfval_min = zeros(num_of_coeffs)
    sfval_max = zeros(num_of_coeffs)
    sfval_avg = zeros(num_of_coeffs)
    sfval_cov = zeros(num_of_coeffs)
    neval = 0
    nsf = num_of_coeffs
    nsfparam = num_of_parameters

    return FingerPrint(
        itype,#::Int64
        description,#::String
        atomtype,#::String
        nenv,#::Int64
        envtypes,#::Vector{String}
        rc_min,#::Float64
        rc_max,#::Float64
        sftype,#::String
        nsf,#::Int64
        nsfparam,#::Int64
        sf,#::Vector{Int64}
        sfparam,#::Matrix{Float64}
        sfenv,#::Matrix{Int64}
        neval,#::Int64
        sfval_min,#::Vector{Float64}
        sfval_max,#::Vector{Float64}
        sfval_avg,#::Vector{Float64}
        sfval_cov,#::Vector{Float64}
    )

end

function chebyshevparam(nenv, kwargs)
    if haskey(kwargs, :radial_Rc)
        #println("radial_Rc = ", kwargs[:radial_Rc])
    else
        error("radial_Rc is not found in keywords $(kwargs)")
    end
    if haskey(kwargs, :radial_N)
        #println("radial_N = ", kwargs[:radial_N])
    else
        error("radial_N is not found in keywords $(kwargs)")
    end
    if haskey(kwargs, :angular_Rc)
        #println("angular_Rc = ", kwargs[:angular_Rc])
    else
        error("angular_Rc is not found in keywords $(kwargs)")
    end
    if haskey(kwargs, :angular_N)
        #println("angular_N = ", kwargs[:angular_N])
    else
        error("angular_N is not found in keywords $(kwargs)")
    end
    num_of_coeffs = kwargs[:radial_N] + kwargs[:angular_N] + 2
    if nenv > 1
        num_of_coeffs *= 2
    end
    Rc = max(kwargs[:angular_Rc], kwargs[:radial_Rc])
    sfparam = zeros(num_of_maxparameters, num_of_coeffs)
    sfparam[1, 1] = kwargs[:radial_Rc]
    sfparam[2, 1] = kwargs[:radial_N]
    sfparam[3, 1] = kwargs[:angular_Rc]
    sfparam[4, 1] = kwargs[:angular_N]
    sfenv = zeros(NENV_MAX, num_of_coeffs)
    num_of_parameters = num_of_maxparameters

    return sfparam, sfenv, Rc, num_of_coeffs, num_of_parameters

end
export FingerPrint



struct FingerPrint_params
    basistype::String
    num_kinds::Int64
    numparams::Int64
    params::Vector{Float64}
    startindex::Int64
    endindex::Int64
end



function get_singlefingerprints_info(fingerprint::FingerPrint, inputdim)
    fingerprint_parameters_set = Vector{FingerPrint_params}(undef, 1)

    fingerprint_parameters = fingerprint.sfparam[:, 1]
    num_kinds = 1
    startindex = 1
    endindex = length(fingerprint.sfparam[:, 1])
    numparams = inputdim
    fingerprint_parameters_set[1] = FingerPrint_params("any single basis", num_kinds, numparams, fingerprint_parameters, startindex, endindex)
    return fingerprint_parameters_set
end



function get_multifingerprints_info(fingerprint::FingerPrint)
    @assert fingerprint.sfparam[1, 1] == 0.0 "This finger print is not a multi version"
    fingerprint_parameters = fingerprint.sfparam[:, 1]
    num_kinds = Int(fingerprint_parameters[2])
    #display(fingerprint.sfparam[:, :])
    fingerprint_parameters_set = Vector{FingerPrint_params}(undef, num_kinds)

    #println(num_kinds)
    startindex = 1
    for ikind = 1:num_kinds
        istart = 3 + (ikind - 1) * (num_of_maxparameters + 2)
        ibasis = Int(fingerprint_parameters[istart])
        if ibasis == 1
            basistype = "Chebyshev"
        elseif ibasis == 2
            basistype = "Spline"
        elseif ibasis == 3
            basistype = "LJ"
        end

        numparams_i = Int(fingerprint_parameters[istart+1])
        params = fingerprint_parameters[istart+2:istart+1+num_of_maxparameters]
        #println(numparams_i)
        #println(params)
        endindex = startindex + numparams_i - 1

        fingerprint_parameters_set[ikind] = FingerPrint_params(basistype, num_kinds, numparams_i, params, startindex, endindex)
        startindex += numparams_i
    end
    return fingerprint_parameters_set
end

